% length 
leng([],0).                            % в пустом списке 0 элементов 
leng([_|T],N):-leng(T,N1), N is N1+1 . % длина непустого списка на 1 больше длины его хвоста

% member
memb(X,[X|_]):-!.          % X входит в список, либо когда X - голова списка 
memb(X, [_|T):- memb(X,T). % либо когда X принадлежит хвосту списка

% append
app([],L,L).                            % если первый список пуст, то второй и третий совпадают
app([H|T1], L2, [H|T3):- app(T1,L2,T3). % T3-результат соединения хвоста первого списка и второго списка 

% remove 
remv(X,[X|T],T).                   % если X - голова списка, то хвост - тот же список без X
remv(X,[H|T],[H|R]):-remv(X,T,R).  % иначе удаляемый элемент содержится в хвосте списка 

% permute
selct(X,[X|T],T).
selct(X,[Y|T1],[Y|T2]):-selct(X,T1,T2). % из двух входных списков убирается по элементу
perm([],[]).
perm(L,[X|T]):-selct(X,L,R),perm(R,T).
/*два списка перестановочны <=> когда из них можно выбрать некоторый эл-т таким образом, 
чтобы оставшиеся списки были перестановочны*/

% sublist
sublst([],_).
sublst([H|T], [H|T1]):-subtail(T, T1). % если эл-ты совпали 
sublst(T, [_|T1]):-sublst(T, T1).

subtail([],_).
subtail([H|T], [H|T1]):-subtail(T,T1). % проверяем, что совпадают остальные эл-ты




% counter(Elem, List, Number) (Подсчет числа вхождений заданного элемента в список)
counter(_,[],0):-!. %если список пустой, то элементов 0
counter(E,[E|T],N):-counter(E,T,N1), N is N1+1,!. %если голова списка-нужный элемент, то их всего столько же сколько в хвосте плюс 1
counter(E,[_|T],N):-counter(E,T,N).               %иначе этих элементов столько же, сколько и в хвосте  

% counter2  ( на основе стандартных предикатов)
counter2(E,L,N):-remv(E,L,R), counter2(E,R,N1), N is N1+1,!.  %считаем сколько раз у нас получилось удалить искомый эл-т в списке
counter2(_,_,0).



% max ( Elem, List) - максимальный элемент в списке
max(H,[H]).                           % если список состоит из одного элемента, то этот элемент и есть максимальный 
max(H,[H|T]):-max(E,T),H>E,!.
max(E,[_|T]):-max(E,T).

% max2 ( на основе стандартных предикатов)
max2(E,L):- length(L,1), append(_,[E],L). % условие остановы, когда длина списка равна 1, и тогда максимальный элемент, это последний элемент списка 
max2(H,[H|T]):-max(E,T),H>E,!.
max2(E,[_|T]):-max(E,T).

/* example(Number,ListMain,Elem,List2) - пример работы реализованных предикатов
предикат выводит максимальное кол-во (Number) повторяющихся элементов в списке(ListMain)
запрос производится следующим образом: example(X,List,_,_)
переменные Elem и List2 являются вспомогательными
вначале с помощью предиката counter подсчитывается кол-во вхождений элемента Elem на отрезках списка ListMain, 
результат записывается в List2, на каждом этапе с помощью предиката max
происходит поиск максимального кол-ва вхождений повторяющихся элементов */
example(_,[A],A,[1]).
example(X,[H,A|T],H,L2):-example(_,[A|T],A,L1),counter(H,[H,A|T],N),append(L1,[N],L2),max(X,L2),!. 
/* пример работы :

| ?- example(X,['a','b','c','c','a','c'],_,_).

X = 3

пояснения : 
Большее число раз в список входит символ 'c', 
предикат example вывел X=3 - максимальное кол-во вхождений данного символа в список.
*/
